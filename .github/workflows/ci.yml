name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.8'

jobs:
  lint-and-format:
    name: 'Lint and Format'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Check code formatting with Black
        run: |
          black --check --diff src/ tests/
          
      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --max-line-length=88 --select=E,W,F --ignore=E203,W503

  tests:
    name: 'Tests'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run unit tests
        run: |
          python -m unittest discover tests/unit/ -v
          
      - name: Run integration tests
        run: |
          python -m unittest discover tests/integration/ -v
          
      - name: Run contract tests
        run: |
          python -m unittest discover tests/contract/ -v

  security-scans:
    name: 'Security Scans'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install safety bandit
          
      - name: Run safety check for vulnerable dependencies
        run: |
          safety check --json || true
          
      - name: Run bandit security linter
        run: |
          bandit -r src/ -f json || true
          
      - name: Check for secrets with truffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  build-package:
    name: 'Build Package'
    runs-on: ubuntu-latest
    needs: [lint-and-format, tests, security-scans]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
          
      - name: Build package
        run: |
          python -m build
          
      - name: Verify package installation
        run: |
          pip install dist/*.whl
          conv2md --help
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/